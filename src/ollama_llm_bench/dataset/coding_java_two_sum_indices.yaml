- task_id: "coding_java_two_sum_indices"
  category: "Coding"
  sub_category: "Java"
  question: "Write a Java function that, given an array of integers and a target sum, returns the indices of two distinct elements whose values add up to the target. The solution must run in O(n) time and use O(n) extra space. Handle cases where no valid pair exists and where duplicate values are present."
  expected_answer:
    most_expected: |
      public int[] twoSum(int[] nums, int target) {
          Map<Integer, Integer> map = new HashMap<>();
          for (int i = 0; i < nums.length; i++) {
              int complement = target - nums[i];
              if (map.containsKey(complement)) {
                  return new int[] { map.get(complement), i };
              }
              map.put(nums[i], i);
          }
          return new int[0]; // or throw exception if no solution
      }
    good_answer: "Uses a HashMap to store visited elements and find complements in a single pass, ensuring O(n) time and O(n) space complexity. Handles no-solution and duplicates correctly."
    pass_option: "Any correct Java implementation that finds two indices summing to the target with O(n) time and O(n) space, even if error handling is minimal."
  incorrect_direction: "The solution has worse than O(n) time complexity (e.g., nested loops), returns incorrect indices, fails on duplicate values, or is not implemented in valid Java."
