- task_id: "java_http_client_fetch_github_user"
  category: "Coding"
  sub_category: "Java"
  question: |
    Write a Java method using the standard Java HTTP Client (JDK 21) to fetch data 
    from the GitHub public API endpoint `https://api.github.com/users/{username}`. 
    The method should handle:
      - HTTP errors (e.g., 4xx, 5xx)
      - Connection and read timeouts
      - JSON parsing of the response into a usable object or map
    Assume the username will be passed as a method parameter.
  expected_answer:
    most_expected: |
      import java.net.URI;
      import java.net.http.HttpClient;
      import java.net.http.HttpRequest;
      import java.net.http.HttpResponse;
      import java.time.Duration;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import java.util.Map;

      public Map<String, Object> fetchGitHubUser(String username) throws Exception {
          HttpClient client = HttpClient.newBuilder()
              .connectTimeout(Duration.ofSeconds(5))
              .build();

          HttpRequest request = HttpRequest.newBuilder()
              .uri(URI.create("https://api.github.com/users/" + username))
              .timeout(Duration.ofSeconds(5))
              .GET()
              .build();

          HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

          if (response.statusCode() != 200) {
              throw new RuntimeException("HTTP error: " + response.statusCode());
          }

          ObjectMapper mapper = new ObjectMapper();
          return mapper.readValue(response.body(), Map.class);
      }
    good_answer: |
      Uses `java.net.http.HttpClient` to send a GET request to the GitHub API, 
      includes timeouts, checks the HTTP status code, and parses the JSON response 
      into a Java object or map using a library like Jackson.
    pass_option: |
      Any valid Java method using the JDK 21 `HttpClient` to fetch the API data, 
      with basic error handling and JSON parsing, even if exception handling or 
      timeout configuration is minimal.
  incorrect_direction: |
    Uses a deprecated HTTP client, omits error handling entirely, fails to parse JSON, 
    or writes code that will not compile in Java 21.
