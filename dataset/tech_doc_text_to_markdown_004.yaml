- task_id: "tech_doc_text_to_markdown_004"
  category: "Data Transformation"
  sub_category: "Text to Markdown"
  question: |
    Convert the following technical documentation text into GitHub-flavored Markdown with these requirements:
    - Use code formatting for parameter names and types
    - Create a parameter table with columns: Name, Type, Description
    - Format errors as a definition list
    - Include a code block example showing usage of `calculateTax` function
    input_text:
    FUNCTION calculateTax
    INPUTS
      amount (number) - The pre-tax amount
      region (string) - ISO country code (e.g., "US", "DE")
      exemptions (array) - Optional tax exemption codes
    OUTPUT
      total (number) - Final amount with tax
      breakdown (object) - Detailed tax components
      warnings (array) - Any applicable tax warnings

    DESCRIPTION
    Calculates sales tax based on region-specific rules. For EU regions, applies VAT rules. For US, uses state-level tax rates. Handles common exemptions like food and medical devices.

    ERRORS
      INVALID_REGION When region code isn't supported
      NEGATIVE_AMOUNT If amount is less than zero
      EXEMPTION_MISMATCH When exemption doesn't apply to region
  expected_answer:
    most_expected: |
      # Function: `calculateTax`

      **Description:**  
      Calculates sales tax based on region-specific rules. For EU regions, applies VAT rules. For US, uses state-level tax rates. Handles common exemptions like food and medical devices.

      ## Inputs

      | Name       | Type     | Description                          |
      |------------|----------|------------------------------------|
      | `amount`   | `number` | The pre-tax amount                  |
      | `region`   | `string` | ISO country code (e.g., "US", "DE")|
      | `exemptions` | `array`  | Optional tax exemption codes        |

      ## Outputs

      | Name        | Type     | Description                    |
      |-------------|----------|--------------------------------|
      | `total`     | `number` | Final amount with tax          |
      | `breakdown` | `object` | Detailed tax components        |
      | `warnings`  | `array`  | Any applicable tax warnings    |

      ## Errors

      - **INVALID_REGION**  
        When region code isn't supported

      - **NEGATIVE_AMOUNT**  
        If amount is less than zero

      - **EXEMPTION_MISMATCH**  
        When exemption doesn't apply to region

      ## Example Usage

      ```javascript
      const result = calculateTax(100, "US", ["food"]);
      console.log(result.total);
      ```
    good_answer: |
      # Function: `calculateTax`

      Calculates sales tax based on region-specific rules. For EU regions, applies VAT rules. For US, uses state-level tax rates. Handles common exemptions like food and medical devices.

      ### Inputs

      | Name       | Type     | Description                       |
      |------------|----------|---------------------------------|
      | `amount`   | `number` | The pre-tax amount               |
      | `region`   | `string` | ISO country code (e.g., "US", "DE") |
      | `exemptions` | `array`  | Optional tax exemption codes     |

      ### Outputs

      | Name        | Type     | Description                   |
      |-------------|----------|-------------------------------|
      | `total`     | `number` | Final amount with tax         |
      | `breakdown` | `object` | Detailed tax components       |
      | `warnings`  | `array`  | Any applicable tax warnings   |

      ### Errors

      - **INVALID_REGION**: When region code isn't supported  
      - **NEGATIVE_AMOUNT**: If amount is less than zero  
      - **EXEMPTION_MISMATCH**: When exemption doesn't apply to region  

      ### Example

      ```js
      const result = calculateTax(100, "US", ["food"]);
      console.log(result.total);
      ```
    pass_option: |
      # Function: `calculateTax`

      Calculates sales tax based on region-specific rules. For EU regions, applies VAT rules. For US, uses state-level tax rates. Handles common exemptions like food and medical devices.

      ## Inputs

      | Name       | Type     | Description                       |
      |------------|----------|---------------------------------|
      | `amount`   | `number` | The pre-tax amount               |
      | `region`   | `string` | ISO country code (e.g., "US", "DE") |
      | `exemptions` | `array`  | Optional tax exemption codes     |

      ## Outputs

      | Name        | Type     | Description                   |
      |-------------|----------|-------------------------------|
      | `total`     | `number` | Final amount with tax         |
      | `breakdown` | `object` | Detailed tax components       |
      | `warnings`  | `array`  | Any applicable tax warnings   |

      ## Errors

      - **INVALID_REGION**: When region code isn't supported  
      - **NEGATIVE_AMOUNT**: If amount is less than zero  
      - **EXEMPTION_MISMATCH**: When exemption doesn't apply to region  

      ## Example Usage

      ```javascript
      const result = calculateTax(100, "US", ["food"]);
      console.log(result.total);
      ```
  incorrect_direction: |
    - Missing code formatting for parameters or types
    - No parameter tables or missing columns
    - Errors not formatted as definition list
    - Missing example or incorrect code block formatting
